<?xml version="1.0" encoding="utf-8"?>
<topic id="e46f2558-fc83-4540-9762-6f494f768376" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        A .Net <externalLink>
          <linkText>ULID</linkText>
          <linkUri>https://github.com/alizain/ulid/blob/master/README.md</linkUri>
        </externalLink> implementation
      </para>
    </introduction>

    <section>
      <title>Why</title>
      <content>
        <para>
          A ULID (<legacyBold>Universally Unique Lexicographically Sortable Identifier</legacyBold>) is an alternative
          to a GUID / UUID. A GUID/UUID can be suboptimal for many use-cases because:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              It isn't the most character efficient way of encoding 128 bits
            </para>
          </listItem>
          <listItem>
            <para>
              It provides no other information than randomness
            </para>
          </listItem>
        </list>
        <para>
          A ULID however:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              Is compatible with UUID/GUID's
            </para>
          </listItem>
          <listItem>
            <para>
              1.21e+24 unique ULIDs per millisecond (1,208,925,819,614,629,174,706,176 to be exact)
            </para>
          </listItem>
          <listItem>
            <para>
              Lexicographically sortable
            </para>
          </listItem>
          <listItem>
            <para>
              Canonically encoded as a 26 character string, as opposed to the 36 character UUID
            </para>
          </listItem>
          <listItem>
            <para>
              Uses Crockford's base32 for better efficiency and readability (5 bits per character)
            </para>
          </listItem>
          <listItem>
            <para>
              Case insensitive
            </para>
          </listItem>
          <listItem>
            <para>
              No special characters (URL safe)
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <section>
      <title>Usage</title>
      <content>
        <para>Creating a ULID:</para>
        <code language="c#">
          <![CDATA[
// Create a ULID
var myulid = Ulid.NewUlid();
// Print ULID
Console.WriteLine(myulid);
          ]]>
        </code>
        <para>Output:</para>
        <para>
          <codeInline>01ASB2XFCZJY7WHZ2FNRTMQJCT</codeInline>
        </para>
        <para>Parsing a ULID:</para>
        <code language="c#">
          <![CDATA[
// Parse ULID:
var myulid = Ulid.Parse("01ASB2XFCZJY7WHZ2FNRTMQJCT");
// Print time-part of ULID:
Console.WriteLine(myulid.Time);
          ]]>
        </code>
        <para>Output:</para>
        <para>
          <codeInline>4-8-2016 15:31:59 +00:00</codeInline>
        </para>
        <para>
          You can also convert from/to <codeEntityReference>T:System.Guid</codeEntityReference>/UUID's, get the byte-representation of a ULID, 
          create a ULID with specific timestamp and you can even specify an <codeEntityReference>T:NUlid.Rng.IUlidRng</codeEntityReference> to
          use for generating the randomness (by default NUlid uses the (slower, but cryptographically secure)
          <codeEntityReference>T:NUlid.Rng.CSUlidRng</codeEntityReference> but a (faster)
          <codeEntityReference>T:NUlid.Rng.SimpleUlidRng</codeEntityReference> is also provided). The ULID is implemented as a struct with
          (operator) overloads for (in)equality, comparison etc. built-in and is, generally, very much like .Net's native
          <codeEntityReference>T:System.Guid</codeEntityReference> struct. The <externalLink>
            <linkText>testsuite</linkText>
            <linkUri>https://github.com/RobThree/NUlid/blob/master/NUlid.Tests</linkUri>
          </externalLink> also serves as a (simple) demonstration of NUlid's features.
        </para>
      </content>
    </section>

    <section>
      <title>Specification</title>
      <content>
        <para>Below is the current specification of ULID as implemented in this library:</para>
        <code language="none">
          <![CDATA[
 01AN4Z07BY 79KA1307SR9X4MV3
|----------|----------------|
 Timestamp     Randomness
  10 chars      16 chars
   48bits        80bits
   base32        base32
         ]]>
        </code>
      </content>
    </section>

    <section>
      <title>Timestamp</title>
      <content>
        <list class="bullet">
          <listItem>
            <para>48 bit integer</para>
          </listItem>
          <listItem>
            <para>UNIX-time in milliseconds</para>
          </listItem>
          <listItem>
            <para>
              Won't run out of space till the year 10895 AD (this .Net specific ULID implementation limits this to <codeEntityReference>F:System.DateTimeOffset.MaxValue</codeEntityReference>).
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <section>
      <title>Randomness</title>
      <content>
        <list class="bullet">
          <listItem>
            <para>80 (Whenever possible: Cryptographically secure) Random bits</para>
          </listItem>
        </list>
      </content>
    </section>

    <section>
      <title>Encoding</title>
      <content>
        <para>
          <externalLink>
            <linkText>Crockford's Base32</linkText>
            <linkUri>http://www.crockford.com/wrmg/base32.html</linkUri>
          </externalLink> is used as shown. This alphabet excludes the letters <literal>I</literal>, <literal>L</literal>,
          <literal>O</literal>, and <literal>U</literal> to avoid confusion and abuse.
        </para>
        <para>
          <codeInline>0123456789ABCDEFGHJKMNPQRSTVWXYZ</codeInline>
        </para>
      </content>
    </section>

    <section>
      <title>Binary Layout and Byte Order</title>
      <content>
        <para>
          The components are encoded as 16 octets. Each component is encoded with the Most Significant Byte first (network byte order).
        </para>
        <code language="none">
          <![CDATA[
0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                      32_bit_uint_time_low                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     16_bit_uint_time_high     |       16_bit_uint_random      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       32_bit_uint_random                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       32_bit_uint_random                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         ]]>
        </code>
      </content>
    </section>

    <section>
      <title>String Representation</title>
      <content>
        <para>A ULID is represented as:</para>
        <para>
          <codeInline>ttttttttttrrrrrrrrrrrrrrrr</codeInline>
        </para>
        <para>
          Where:
        </para>
        <definitionTable>
          <definedTerm>t</definedTerm>
          <definition>
            <para>is Timestamp</para>
          </definition>
          <definedTerm>r</definedTerm>
          <definition>
            <para>is Randomness</para>
          </definition>
        </definitionTable>
      </content>
    </section>

    <section>
      <title>Prior Art</title>
      <content>
        <para>
          Based on / inspired by <externalLink>
            <linkText>alizain/ulid</linkText>
            <linkUri>https://github.com/alizain/ulid</linkUri>
          </externalLink>.
        </para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="55d108d0-b9ef-495d-8303-73b4ec638e70" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>
